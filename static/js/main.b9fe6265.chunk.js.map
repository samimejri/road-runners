{"version":3,"sources":["Ressources/MapStyle.ts","Ressources/icons.ts","Components/Map.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["mapStyle","UserIndicator","path","fillColor","window","google","style","width","height","Map","state","speed","initialPosition","lat","lng","map","maps","document","getElementById","center","mapTypeId","zoom","disableDefaultUI","styles","marker","Marker","position","icon","navigator","geolocation","watchPosition","setPosition","coords","latitude","longitude","panTo","setState","alert","enableHighAccuracy","maximumAge","timeout","id","this","Component","App","className","React","Boolean","location","hostname","match","ReactDOM","render","serviceWorker","ready","then","registration","unregister"],"mappings":"mPAAaA,G,MACb,CACE,CACE,YAAe,cACf,QAAW,CACT,CACE,WAAc,SAIpB,CACE,YAAe,mBACf,QAAW,CACT,CACE,MAAS,WAEX,CACE,WAAc,IAEhB,CACE,UAAa,IAEf,CACE,WAAc,SAIpB,CACE,YAAe,qBACf,QAAW,CACT,CACE,MAAS,WAEX,CACE,UAAa,IAEf,CACE,WAAc,SAIpB,CACE,YAAe,iBACf,YAAe,gBACf,QAAW,CACT,CACE,MAAS,WAEX,CACE,UAAa,MAInB,CACE,YAAe,iBACf,YAAe,kBACf,QAAW,CACT,CACE,MAAS,WAEX,CACE,UAAa,IAEf,CACE,OAAU,KAIhB,CACE,YAAe,yBACf,YAAe,kBACf,QAAW,CACT,CACE,WAAc,MAEhB,CACE,OAAU,KAIhB,CACE,YAAe,yBACf,YAAe,qBACf,QAAW,CACT,CACE,OAAU,KAIhB,CACE,YAAe,0BACf,YAAe,gBACf,QAAW,CACT,CACE,OAAU,KAIhB,CACE,YAAe,0BACf,YAAe,kBACf,QAAW,CACT,CACE,MAAS,WAEX,CACE,WAAc,MAEhB,CACE,OAAU,KAIhB,CACE,YAAe,YACf,YAAe,WACf,QAAW,CACT,CACE,MAAS,WAEX,CACE,UAAa,MAInB,CACE,YAAe,YACf,YAAe,mBACf,QAAW,CACT,CACE,MAAS,aAIf,CACE,YAAe,MACf,YAAe,WACf,QAAW,CACT,CACE,MAAS,WAEX,CACE,UAAa,MAInB,CACE,YAAe,gBACf,YAAe,WACf,QAAW,CACT,CACE,MAAS,WAEX,CACE,UAAa,MAInB,CACE,YAAe,eACf,YAAe,gBACf,QAAW,CACT,CACE,MAAS,WAEX,CACE,WAAc,QAIpB,CACE,YAAe,eACf,YAAe,kBACf,QAAW,CACT,CACE,MAAS,WAEX,CACE,UAAa,IAEf,CACE,WAAc,MAEhB,CACE,OAAU,KAIhB,CACE,YAAe,aACf,YAAe,WACf,QAAW,CACT,CACE,MAAS,WAEX,CACE,UAAa,MAInB,CACE,YAAe,aACf,YAAe,gBACf,QAAW,CACT,CACE,MAAS,aAIf,CACE,YAAe,UACf,YAAe,WACf,QAAW,CACT,CACE,MAAS,WAEX,CACE,UAAa,MAInB,CACE,YAAe,eACf,YAAe,gBACf,QAAW,CACT,CACE,MAAS,aAIf,CACE,YAAe,QACf,YAAe,WACf,QAAW,CACT,CACE,MAAS,WAEX,CACE,UAAa,QC9ORC,EACb,CACIC,KAAM,sLACNC,UAAW,UCIfC,OAAOC,OAASD,OAAOC,QAAU,GAEjC,IAAMC,EAAQ,CACVC,MAAO,QACPC,OAAQ,SAiBCC,EAAb,YACI,aAAc,IAAD,8BACT,4CAAM,MACDC,MAAQ,CAACC,MAAO,GAFZ,EADjB,iFAKyB,IAAD,OAEZC,EAAkB,CAAEC,IAAK,SAAWC,IAAK,UAEzCC,EAAM,IAAIX,OAAOC,OAAOW,KAAKP,IAAIQ,SAASC,eAAe,OAAQ,CACjEC,OAAQP,EACRQ,UAAW,UACXC,KAAM,GACNC,kBAAkB,EAClBC,OAAQvB,IAGRwB,EAAS,IAAIpB,OAAOC,OAAOW,KAAKS,OAAO,CACvCC,SAAUd,EACVe,KAAM1B,EACNc,IAAKA,IAGLa,UAAUC,aACVD,UAAUC,YAAYC,eAClB,SAACJ,GACGF,EAAOO,YAAY,CAAElB,IAAKa,EAASM,OAAOC,SAAUnB,IAAKY,EAASM,OAAOE,YACzEnB,EAAIoB,MAAM,CAAEtB,IAAKa,EAASM,OAAOC,SAAUnB,IAAKY,EAASM,OAAOE,YAChE,EAAKE,SAAS,CACVzB,MAAOe,EAASM,OAAOrB,WAG/B,WAAQ0B,MAAM,sCACd,CAAEC,oBAAoB,EAAMC,WAAY,EAAGC,QAAS,QAjCpE,+BAkDQ,OACI,6BACI,yBAAKC,GAAG,MAAMnC,MAAOA,IACrB,6BACI,4BAAKoC,KAAKhC,MAAMC,MAAQ+B,KAAKhC,MAAMC,MAAQ,YAtD/D,GAAyBgC,aCFVC,E,iLApBX,OACE,yBAAKC,UAAU,sBACb,yBAAKA,UAAU,QACb,qCAEF,yBAAKA,UAAU,UACb,uCAEF,yBAAKA,UAAU,WACb,wCACA,kBAAC,EAAD,OAEF,yBAAKA,UAAU,UACb,4C,GAfQC,IAAMH,WCQJI,QACW,cAA7B3C,OAAO4C,SAASC,UAEe,UAA7B7C,OAAO4C,SAASC,UAEhB7C,OAAO4C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnC,SAASC,eAAe,SDmI3C,kBAAmBU,WACrBA,UAAUyB,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b9fe6265.chunk.js","sourcesContent":["export const mapStyle = \r\n[\r\n  {\r\n    \"elementType\": \"labels.icon\",\r\n    \"stylers\": [\r\n      {\r\n        \"visibility\": \"off\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"elementType\": \"labels.text.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#000000\"\r\n      },\r\n      {\r\n        \"saturation\": 35\r\n      },\r\n      {\r\n        \"lightness\": 40\r\n      },\r\n      {\r\n        \"visibility\": \"off\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"elementType\": \"labels.text.stroke\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#000000\"\r\n      },\r\n      {\r\n        \"lightness\": 15\r\n      },\r\n      {\r\n        \"visibility\": \"off\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"administrative\",\r\n    \"elementType\": \"geometry.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#000000\"\r\n      },\r\n      {\r\n        \"lightness\": 20\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"administrative\",\r\n    \"elementType\": \"geometry.stroke\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#000000\"\r\n      },\r\n      {\r\n        \"lightness\": 15\r\n      },\r\n      {\r\n        \"weight\": 1\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"administrative.country\",\r\n    \"elementType\": \"geometry.stroke\",\r\n    \"stylers\": [\r\n      {\r\n        \"visibility\": \"on\"\r\n      },\r\n      {\r\n        \"weight\": 2\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"administrative.country\",\r\n    \"elementType\": \"labels.text.stroke\",\r\n    \"stylers\": [\r\n      {\r\n        \"weight\": 2\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"administrative.province\",\r\n    \"elementType\": \"geometry.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"weight\": 1\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"administrative.province\",\r\n    \"elementType\": \"geometry.stroke\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#ffc107\"\r\n      },\r\n      {\r\n        \"visibility\": \"on\"\r\n      },\r\n      {\r\n        \"weight\": 1\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"landscape\",\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#000000\"\r\n      },\r\n      {\r\n        \"lightness\": 20\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"landscape\",\r\n    \"elementType\": \"labels.text.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#000040\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"poi\",\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#000000\"\r\n      },\r\n      {\r\n        \"lightness\": 20\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.arterial\",\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#000000\"\r\n      },\r\n      {\r\n        \"lightness\": 20\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.highway\",\r\n    \"elementType\": \"geometry.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#0080ff\"\r\n      },\r\n      {\r\n        \"visibility\": \"on\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.highway\",\r\n    \"elementType\": \"geometry.stroke\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#000000\"\r\n      },\r\n      {\r\n        \"lightness\": 30\r\n      },\r\n      {\r\n        \"visibility\": \"on\"\r\n      },\r\n      {\r\n        \"weight\": 2\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.local\",\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#000000\"\r\n      },\r\n      {\r\n        \"lightness\": 16\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.local\",\r\n    \"elementType\": \"geometry.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#004b97\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"transit\",\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#000000\"\r\n      },\r\n      {\r\n        \"lightness\": 19\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"transit.line\",\r\n    \"elementType\": \"geometry.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#95004a\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"water\",\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#000000\"\r\n      },\r\n      {\r\n        \"lightness\": 15\r\n      }\r\n    ]\r\n  }\r\n]","export const UserIndicator = \r\n{\r\n    path: \"M8 256C8 119 119 8 256 8s248 111 248 248-111 248-248 248S8 393 8 256zm379.5 27.5l-123-123c-4.7-4.7-12.3-4.7-17 0l-123 123c-7.6 7.6-2.2 20.5 8.5 20.5h246c10.7 0 16.1-12.9 8.5-20.5z\",\r\n    fillColor: 'cobalt'\r\n}","import React, { Component } from 'react';\r\nimport { mapStyle } from '../Ressources/MapStyle';\r\nimport { UserIndicator } from '../Ressources/icons';\r\n\r\ndeclare global {\r\n    interface Window { google: any; }\r\n}\r\nwindow.google = window.google || {};\r\n\r\nconst style = {\r\n    width: \"100vw\",\r\n    height: \"100vh\",\r\n};\r\n\r\ninterface mapState {\r\n    speed: number | null\r\n}\r\n\r\ninterface Position {\r\n    lat: number,\r\n    lng: number\r\n}\r\n\r\ninterface UserGeocode {\r\n    position: Position,\r\n    direction: number\r\n}\r\n\r\nexport class Map extends Component<{}, mapState> {\r\n    constructor(){\r\n        super({});\r\n        this.state = {speed: 0};\r\n    }\r\n    componentDidMount() {\r\n\r\n        var initialPosition = { lat: 48.832380, lng: 2.234953 };\r\n\r\n        var map = new window.google.maps.Map(document.getElementById('map'), {\r\n            center: initialPosition,\r\n            mapTypeId: 'roadmap',\r\n            zoom: 18,\r\n            disableDefaultUI: true,\r\n            styles: mapStyle\r\n        });\r\n\r\n        var marker = new window.google.maps.Marker({\r\n            position: initialPosition,\r\n            icon: UserIndicator,\r\n            map: map\r\n        });\r\n\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.watchPosition(\r\n                (position) => {\r\n                    marker.setPosition({ lat: position.coords.latitude, lng: position.coords.longitude });\r\n                    map.panTo({ lat: position.coords.latitude, lng: position.coords.longitude });\r\n                    this.setState({\r\n                        speed: position.coords.speed\r\n                    });\r\n                },\r\n                () => { alert(\"Failed to pan to new position!!!\"); },\r\n                { enableHighAccuracy: true, maximumAge: 0, timeout: 1000 }\r\n            );\r\n\r\n            // navigator.geolocation.getCurrentPosition(\r\n            //     function (position) {\r\n            //         pos.lat = position.coords.latitude;\r\n            //         pos.lng = position.coords.longitude;\r\n            //         map.setCenter(pos);\r\n            //     },\r\n            //     function () {\r\n            //     },\r\n            //     { enableHighAccuracy: true, maximumAge: 10000 }\r\n            // );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div id=\"map\" style={style}></div>\r\n                <div>\r\n                    <h2>{this.state.speed ? this.state.speed : 'NA'}</h2>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport { Map } from './Components/Map';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App grid-container\">\n        <div className=\"menu\">\n          <h5>Menu</h5>\n        </div>\n        <div className=\"header\">\n          <h4>Header</h4>\n        </div>\n        <div className=\"content\">\n          <h4>Contents</h4>\n          <Map />\n        </div>\n        <div className=\"footer\">\n          <h5>footer</h5>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}