{"version":3,"sources":["Ressources/icons.ts","Components/Map.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["UserIndicator","path","fillColor","strokeColor","strokeWeight","anchor","window","google","maps","Point","scale","rotation","Map","state","speed","heading","initialPosition","lat","lng","previousPosition","map","document","getElementById","center","mapTypeId","zoom","disableDefaultUI","marker","Marker","position","icon","optimized","navigator","geolocation","watchPosition","coords","setPosition","latitude","longitude","panTo","Math","round","geometry","spherical","computeHeading","LatLng","orientedIcon","setIcon","rotateMap","setState","alert","enableHighAccuracy","maximumAge","timeout","degs","div","style","transform","maxSize","innerHeight","innerWidth","mapStyle","width","height","className","id","this","Component","App","React","Boolean","location","hostname","match","ReactDOM","render","serviceWorker","ready","then","registration","unregister"],"mappings":"mPAAaA,G,MACb,CACIC,KAAM,sLACNC,UAAW,QACXC,YAAa,aACbC,aAAc,EACdC,OAAQ,IAAIC,OAAOC,OAAOC,KAAKC,MAAM,GAAI,IACzCC,MAAO,GACPC,SAAU,ICDdL,OAAOC,OAASD,OAAOC,QAAU,GAO1B,IAAMK,EAAb,YACI,aAAe,IAAD,8BACV,4CAAM,MACDC,MAAQ,CAAEC,MAAO,EAAGC,QAAS,GAFxB,EADlB,iFAMyB,IAAD,OACZC,EAAkB,CAAEC,IAAK,SAAWC,IAAK,UACzCC,EAAmBH,EAEnBI,EAAM,IAAId,OAAOC,OAAOC,KAAKI,IAAIS,SAASC,eAAe,OAAQ,CACjEC,OAAQP,EACRQ,UAAW,UACXC,KAAM,GACNC,kBAAkB,IAIlBC,EAAS,IAAIrB,OAAOC,OAAOC,KAAKoB,OAAO,CACvCC,SAAUb,EACVc,KAAM9B,EACNE,UAAW,QACX6B,WAAW,EACXX,IAAKA,IAGLY,UAAUC,aACVD,UAAUC,YAAYC,eAClB,SAACL,GACG,GAAIA,EAASM,OAAOrB,OAASe,EAASM,OAAOrB,MAAQ,EAAG,CACpDa,EAAOS,YAAY,CAAEnB,IAAKY,EAASM,OAAOE,SAAUnB,IAAKW,EAASM,OAAOG,YACzElB,EAAImB,MAAM,CAAEtB,IAAKY,EAASM,OAAOE,SAAUnB,IAAKW,EAASM,OAAOG,YAEhE,IAAIvB,EAAUyB,KAAKC,MAAMnC,OAAOC,OAAOC,KAAKkC,SAASC,UAAUC,eAC3D,IAAIrC,OAAOC,KAAKqC,OAAO1B,EAAiBF,IAAKE,EAAiBD,KAC9D,IAAIX,OAAOC,KAAKqC,OAAOhB,EAASM,OAAOE,SAAUR,EAASM,OAAOG,aAEjEQ,EAAe9C,EACnB8C,EAAanC,SAAWI,EACxBY,EAAOoB,QAAQD,GAEf,EAAKE,UAAUjC,GAEf,EAAKkC,SAAS,CACVnC,MAAOe,EAASM,OAAOrB,MACvBC,QAASA,IAGjBI,EAAmB,CAAEF,IAAKY,EAASM,OAAOE,SAAUnB,IAAKW,EAASM,OAAOG,cAE7E,WAAQY,MAAM,sCACd,CAAEC,oBAAoB,EAAMC,WAAY,EAAGC,QAAS,QAnDpE,gCAwDcC,GACN,IAAIC,EAAMlC,SAASC,eAAe,OACvB,MAAPiC,IAEAA,EAAIC,MAAMC,UAAY,UAAYH,EAAO,UA5DrD,+BAiEQ,IAAII,EAAUpD,OAAOqD,aAAerD,OAAOsD,WAAatD,OAAOqD,YAAcrD,OAAOsD,WAChFC,EAAW,CAAEC,MAAiB,IAAVJ,EAAeK,OAAkB,IAAVL,GAE/C,OACI,6BACI,yBAAKM,UAAU,iBACX,yBAAKC,GAAG,MAAMT,MAAOK,KAEzB,6BACI,4BAAKK,KAAKrD,MAAMC,MAA2B,IAAnBoD,KAAKrD,MAAMC,MAAc,KAAjD,SACA,4BAAKoD,KAAKrD,MAAME,QAAhB,cA3EpB,GAAyBoD,aCYVC,E,iLApBX,OACE,yBAAKJ,UAAU,sBACb,yBAAKA,UAAU,QACb,qCAEF,yBAAKA,UAAU,UACb,uCAEF,yBAAKA,UAAU,WACb,wCACA,kBAAC,EAAD,OAEF,yBAAKA,UAAU,UACb,4C,GAfQK,IAAMF,WCQJG,QACW,cAA7BhE,OAAOiE,SAASC,UAEe,UAA7BlE,OAAOiE,SAASC,UAEhBlE,OAAOiE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStD,SAASC,eAAe,SDmI3C,kBAAmBU,WACrBA,UAAU4C,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.df91725b.chunk.js","sourcesContent":["export const UserIndicator =\r\n{\r\n    path: \"M8 256C8 119 119 8 256 8s248 111 248 248-111 248-248 248S8 393 8 256zm379.5 27.5l-123-123c-4.7-4.7-12.3-4.7-17 0l-123 123c-7.6 7.6-2.2 20.5 8.5 20.5h246c10.7 0 16.1-12.9 8.5-20.5z\",\r\n    fillColor: 'white',\r\n    strokeColor: 'dodgerblue',\r\n    strokeWeight: 5,\r\n    anchor: new window.google.maps.Point(25, 25),\r\n    scale: 0.1,\r\n    rotation: 0\r\n}","import React, { Component } from 'react';\r\n// import { mapStyle } from '../Ressources/MapStyle';\r\nimport { UserIndicator } from '../Ressources/icons';\r\n\r\ndeclare global {\r\n    interface Window { google: any; }\r\n}\r\nwindow.google = window.google || {};\r\n\r\ninterface mapState {\r\n    speed: number | null,\r\n    heading: number\r\n}\r\n\r\nexport class Map extends Component<{}, mapState> {\r\n    constructor() {\r\n        super({});\r\n        this.state = { speed: 0, heading: 0 };\r\n    }\r\n\r\n    componentDidMount() {\r\n        var initialPosition = { lat: 48.832380, lng: 2.234953 };\r\n        var previousPosition = initialPosition;\r\n\r\n        var map = new window.google.maps.Map(document.getElementById('map'), {\r\n            center: initialPosition,\r\n            mapTypeId: 'roadmap',\r\n            zoom: 18,\r\n            disableDefaultUI: true,\r\n            //styles: mapStyle\r\n        });\r\n\r\n        var marker = new window.google.maps.Marker({\r\n            position: initialPosition,\r\n            icon: UserIndicator,\r\n            fillColor: \"White\",\r\n            optimized: false,\r\n            map: map\r\n        });\r\n\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.watchPosition(\r\n                (position) => {\r\n                    if (position.coords.speed && position.coords.speed > 5) {\r\n                        marker.setPosition({ lat: position.coords.latitude, lng: position.coords.longitude });\r\n                        map.panTo({ lat: position.coords.latitude, lng: position.coords.longitude });\r\n\r\n                        var heading = Math.round(window.google.maps.geometry.spherical.computeHeading(\r\n                            new google.maps.LatLng(previousPosition.lat, previousPosition.lng),\r\n                            new google.maps.LatLng(position.coords.latitude, position.coords.longitude)));\r\n\r\n                        var orientedIcon = UserIndicator;\r\n                        orientedIcon.rotation = heading;\r\n                        marker.setIcon(orientedIcon);\r\n\r\n                        this.rotateMap(heading);\r\n\r\n                        this.setState({\r\n                            speed: position.coords.speed,\r\n                            heading: heading\r\n                        });\r\n                    }\r\n                    previousPosition = { lat: position.coords.latitude, lng: position.coords.longitude };\r\n                },\r\n                () => { alert(\"Failed to pan to new position!!!\"); },\r\n                { enableHighAccuracy: true, maximumAge: 0, timeout: 1000 }\r\n            );\r\n        }\r\n    }\r\n\r\n    rotateMap(degs: number) {\r\n        var div = document.getElementById('map');\r\n        if (div != null) {\r\n            //div.style.webkitTransform = 'rotate(' + degs + 'deg)';\r\n            div.style.transform = 'rotate(' + degs + 'deg)';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var maxSize = window.innerHeight >= window.innerWidth ? window.innerHeight : window.innerWidth;\r\n        var mapStyle = { width: maxSize * 1.5, height: maxSize * 1.5 };\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"map-container\">\r\n                    <div id=\"map\" style={mapStyle}></div>\r\n                </div>\r\n                <div>\r\n                    <h2>{this.state.speed ? this.state.speed * 3.6 : '--'} km/h</h2>\r\n                    <h2>{this.state.heading}Â°</h2>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport { Map } from './Components/Map';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App grid-container\">\n        <div className=\"menu\">\n          <h5>Menu</h5>\n        </div>\n        <div className=\"header\">\n          <h4>Header</h4>\n        </div>\n        <div className=\"content\">\n          <h4>Contents</h4>\n          <Map />\n        </div>\n        <div className=\"footer\">\n          <h5>footer</h5>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}